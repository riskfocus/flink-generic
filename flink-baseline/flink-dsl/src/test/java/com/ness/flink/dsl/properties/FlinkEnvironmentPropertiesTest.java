/*
 * Copyright 2021-2023 Ness Digital Engineering
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.ness.flink.dsl.properties;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Map;
import java.util.Optional;
import org.apache.flink.api.common.RuntimeExecutionMode;
import org.apache.flink.api.java.utils.ParameterTool;
import org.apache.flink.streaming.api.environment.CheckpointConfig;
import org.junit.jupiter.api.Test;
import org.junitpioneer.jupiter.SetEnvironmentVariable;

class FlinkEnvironmentPropertiesTest {

    @Test
    void shouldReturnDefaultValues() {
        var properties = FlinkEnvironmentProperties.from(PropertiesProvider.from(ParameterTool.fromMap(Map.of())));

        assertTrue(properties.isLocalDev());
        assertFalse(properties.isEnabledRocksDb());
        assertFalse(properties.isEnabledObjectReuse());
        assertFalse(properties.isDisableGenericTypes());
        assertTrue(properties.isEnabledCheckpoints());
        assertFalse(properties.isEnabledIncrementalCheckpointing());
        assertFalse(properties.isMetricsSystemResource());
        assertEquals(8081, properties.getLocalPortWebUi());
        assertEquals(Runtime.getRuntime().availableProcessors(), properties.getLocalParallelism());
        assertEquals(9249, properties.getPrometheusReporterPort());
        assertEquals(0, properties.getBufferTimeoutMs(), "See overwritten values in application.yml");
        assertEquals(500, properties.getAutoWatermarkInterval(), "See overwritten values in application.yml");
        assertEquals(10_000, properties.getMetricsFetcherUpdateInterval());
        assertNotNull(properties.getCheckpointsDataUri());
        assertNull(properties.getRuntimeExecutionMode());
        assertNotNull(properties.executionMode());
        assertEquals(Optional.empty(), properties.executionMode());
        assertTrue(properties.isDisableAutoGeneratedUid());
    }

    @Test
    @SetEnvironmentVariable(key = "ENVIRONMENT_RUNTIME_EXECUTION_MODE", value = "BATCH")
    void shouldOverwriteRuntimeExecutionModeFromEnv() {
        var properties = FlinkEnvironmentProperties.from(PropertiesProvider.from(ParameterTool.fromMap(Map.of())));

        assertNotNull(properties.getRuntimeExecutionMode());
        assertEquals(RuntimeExecutionMode.BATCH, properties.getRuntimeExecutionMode());
        assertEquals(Optional.of(RuntimeExecutionMode.BATCH), properties.executionMode());
    }

    @Test
    @SetEnvironmentVariable(key = "ENVIRONMENT_DISABLE_AUTO_GENERATED_UID", value = "false")
    void shouldOverwriteDisableAutoGeneratedUIDsFromEnv() {
        var properties = FlinkEnvironmentProperties.from(PropertiesProvider.from(ParameterTool.fromMap(Map.of())));

        assertFalse(properties.isDisableAutoGeneratedUid());
    }

    @Test
    @SetEnvironmentVariable(key = "ENVIRONMENT_ENABLED_ROCKS_DB", value = "true")
    void shouldPopulateCheckpointingConfig() {
        var properties = FlinkEnvironmentProperties.from(PropertiesProvider.from(ParameterTool.fromMap(Map.of())));

        assertTrue(properties.isEnabledCheckpoints());
        assertTrue(properties.isEnabledRocksDb());

        CheckpointConfig config = new CheckpointConfig();
        properties.configureCheckpointing(config);

        assertEquals(30000L, config.getCheckpointInterval());
        assertEquals(10000L, config.getMinPauseBetweenCheckpoints());
        assertTrue(config.isUnalignedCheckpointsEnabled());
    }

}